PrimaryExpression :
    <IDENTIFIER>
    | <CONSTANT>
    | <STRING_LITERAL>
    | <LPAREN> Expression <RPAREN>
    | GenericSelection
    | PrimaryThisExpression
;

PrimaryThisExpression : <THIS> <POINT> <IDENTIFIER>;

GenericSelection :
    <_GENERIC> <LPAREN> AssigmentExpression <COMMA> GenericAssocList <RPAREN>
;

//GenericAssocList :
//    GenericAssociation
//    | ( GenericAssocList <COMMA> GenericAssociation )
//;

GenericAssocList :
    GenericAssociation [GenericAssocListPrim]
;

GenericAssocListPrim :
    (<COMMA> GenericAssociation  [ GenericAssocListPrim])
;

GenericAssociation :
    ( TypeName ":" AssigmentExpression )
    | ( <DEFAULT> ":" AssigmentExpression )
;

// PostfixExpression :
//     PrimaryExpression
//     | ( PostfixExpression <LBRACKET> Expression <RBRACKET> )
//     | ( PostfixExpression <LPAREN> [ArgumentExpressionList] <RPAREN> )
//     | ( PostfixExpression <POINT> <IDENTIFIER> )
//     | ( PostfixExpression "->" <IDENTIFIER> )
//     | ( PostfixExpression "++" )
//     | ( PostfixExpression "-" )
//     | ( <LPAREN> TypeName <RPAREN> <LBRACE> InitializerList <RBRACE> )
//     | ( <LPAREN> TypeName <RPAREN> <LBRACE> InitializerList <COMMA> <RBRACE> )
// ;

PostfixExpression :
    ( PrimaryExpression [PostfixExpressionPrim] )
    |  <LPAREN> TypeName <RPAREN> <LBRACE> InitializerList <RBRACE> =>|| [PostfixExpressionPrim]
    | ( <LPAREN> TypeName <RPAREN> <LBRACE> InitializerList <COMMA> <RBRACE> [PostfixExpressionPrim] )
;

PostfixExpressionPrim :
     ( <LBRACKET> Expression <RBRACKET> [PostfixExpressionPrim] )
     | ( <LPAREN> [ArgumentExpressionList] <RPAREN> [PostfixExpressionPrim] )
     | ( <POINT> <IDENTIFIER> [PostfixExpressionPrim] )
     | ( "->" <IDENTIFIER> [PostfixExpressionPrim] )
     | ( "++" [PostfixExpressionPrim] )
     | ( "-" [PostfixExpressionPrim] )
;


//ArgumentExpressionList :
//    AssigmentExpression
//    | ( ArgumentExpressionList <COMMA> AssigmentExpression )
//;

ArgumentExpressionList :
    AssigmentExpression [ArgumentExpressionListPrim]
;

ArgumentExpressionListPrim :
    (<COMMA> AssigmentExpression  [ ArgumentExpressionListPrim])
;

UnaryExpression :
    PostfixExpression
    | ( "++" UnaryExpression )
    | ( "-" UnaryExpression )
    | ( UnaryOperator CastExpression )
    | ( <SIZEOF> UnaryExpression )
    | ( <SIZEOF> <LPAREN> TypeName <RPAREN> )
    | ( <_ALIGNOF> <LPAREN> TypeName <RPAREN> )
;

UnaryOperator : "&" | "*" | "+" | "-" | "~" | "!" ;

CastExpression :
    UnaryExpression
    | ( <LPAREN> TypeName <RPAREN> CastExpression )
;

//MultiplicativeExpression :
//    CastExpression
//    | (MultiplicativeExpression "*" CastExpression)
//    | (MultiplicativeExpression "/" CastExpression)
//    | (MultiplicativeExpression "%" CastExpression)
//;

MultiplicativeExpression :
    CastExpression [MultiplicativeExpressionPrim]
;

MultiplicativeExpressionPrim :
    ("*" CastExpression [MultiplicativeExpressionPrim] )
    | ("/" CastExpression [MultiplicativeExpressionPrim] )
    | ("%" CastExpression [MultiplicativeExpressionPrim] )
;

//AdditiveExpression :
//    MultiplicativeExpression
//    | (AdditiveExpression "+" MultiplicativeExpression)
//    | (AdditiveExpression "-" MultiplicativeExpression)
//;

AdditiveExpression :
    MultiplicativeExpression [AdditiveExpressionPrim]
;

AdditiveExpressionPrim :
    ("+" MultiplicativeExpression [AdditiveExpressionPrim] )
    | ("-" MultiplicativeExpression [AdditiveExpressionPrim] )
;

//ShiftExpression :
//    AdditiveExpression
//    | (ShiftExpression "<<" AdditiveExpression)
//    | (ShiftExpression ">>" AdditiveExpression)
//;

ShiftExpression :
    AdditiveExpression (("<<" | ">>") AdditiveExpression)*
;

// RelationalExpression :
//     ShiftExpression
//     | ( RelationalExpression "<" ShiftExpression )
//     | ( RelationalExpression ">" ShiftExpression )
//     | ( RelationalExpression "<=" ShiftExpression )
//     | ( RelationalExpression "<=" ShiftExpression )
// ;

RelationalExpression :
    ShiftExpression (( "<" | ">" | "<=" | ">=" ) ShiftExpression)*
;

// EqualityExpression :
//     RelationalExpression
//     | (EqualityExpression "==" RelationalExpression)
//     | (EqualityExpression "!=" RelationalExpression)
// ;

EqualityExpression :
    RelationalExpression (( "==" | "!=" ) RelationalExpression)*
;

//AndExpression :
//    EqualityExpression
//    | (AndExpression "&" EqualityExpression)
//;

AndExpression :
    EqualityExpression [AndExpressionPrim]
;

AndExpressionPrim :
    ("&" EqualityExpression [AndExpressionPrim])
;

//ExclusiveOrExpression :
//    AndExpression
//    | (ExclusiveOrExpression "^" AndExpression)
//;

ExclusiveOrExpression :
    AndExpression [ExclusiveOrExpressionPrim]
;

ExclusiveOrExpressionPrim :
    ("^" AndExpression [ExclusiveOrExpressionPrim])
;

//InclusiveOrExpression :
//    ExclusiveOrExpression
//    | (InclusiveOrExpression "|" ExclusiveOrExpression)
//;

InclusiveOrExpression :
    ExclusiveOrExpression [InclusiveOrExpressionPrim]
;

InclusiveOrExpressionPrim :
    ("|" ExclusiveOrExpression [InclusiveOrExpressionPrim])
;

//LogicalAndExpression :
//    InclusiveOrExpression
//    | (LogicalAndExpression "&&" InclusiveOrExpression)
//;

LogicalAndExpression :
    InclusiveOrExpression [LogicalAndExpressionPrim]
;

LogicalAndExpressionPrim :
    ("&&" InclusiveOrExpression [LogicalAndExpressionPrim])
;

//LogicalOrExpression :
//    LogicalAndExpression
//    | (LogicalOrExpression "||" LogicalAndExpression)
//;

LogicalOrExpression :
    LogicalAndExpression [LogicalOrExpressionPrim]
;

LogicalOrExpressionPrim :
    ("||" LogicalAndExpression [LogicalOrExpressionPrim])
;

//ConditionalExpression :
//    LogicalOrExpression
//    | (LogicalOrExpression "?" Expression ":" ConditionalExpression)
//;

ConditionalExpression :
    LogicalOrExpression [ConditionalExpressionPrim]
;

ConditionalExpressionPrim :
    ("?" Expression ":" ConditionalExpression [LogicalOrExpressionPrim])
;

AssigmentExpression :
     UnaryExpression AssigmentOperator =>|| AssigmentExpression
    | ConditionalExpression
;

AssigmentOperator : <ASSIGN> | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;

//Expression :
//    AssigmentExpression
//    | (Expression <COMMA> AssigmentExpression)
//;

Expression :
    AssigmentExpression [ExpressionPrim]
;

ExpressionPrim :
    (<COMMA> AssigmentExpression [ExpressionPrim])
;

ConstantExpression : ConditionalExpression;