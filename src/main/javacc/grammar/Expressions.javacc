PrimaryExpression :
    <IDENTIFIER>
    | <CONSTANT>
    | <STRING_LITERAL>
    | <LPAREN> Expression <RPAREN>
    | GenericSelection
    | PrimaryThisExpression
;

PrimaryThisExpression : <THIS> <POINT> <IDENTIFIER>;

GenericSelection :
    <_GENERIC> <LPAREN> AssigmentExpression <COMMA> GenericAssocList <RPAREN>
;

//GenericAssocList :
//    GenericAssociation
//    | ( GenericAssocList <COMMA> GenericAssociation )
//;

GenericAssocList :
    GenericAssociation [GenericAssocListPrim]
;

GenericAssocListPrim :
    (<COMMA> GenericAssociation  [ GenericAssocListPrim])
;

GenericAssociation :
    ( TypeName <COLON> AssigmentExpression )
    | ( <DEFAULT> <COLON> AssigmentExpression )
;

// PostfixExpression :
//     PrimaryExpression
//     | ( PostfixExpression <LBRACKET> Expression <RBRACKET> )
//     | ( PostfixExpression <LPAREN> [ArgumentExpressionList] <RPAREN> )
//     | ( PostfixExpression <POINT> <IDENTIFIER> )
//     | ( PostfixExpression <ARROW> <IDENTIFIER> )
//     | ( PostfixExpression <INCR> )
//     | ( PostfixExpression <MINUS> )
//     | ( <LPAREN> TypeName <RPAREN> <LBRACE> InitializerList <RBRACE> )
//     | ( <LPAREN> TypeName <RPAREN> <LBRACE> InitializerList <COMMA> <RBRACE> )
// ;

PostfixExpression :
    ( PrimaryExpression [PostfixExpressionPrim] )
    |  <LPAREN> TypeName <RPAREN> <LBRACE> InitializerList <RBRACE> =>|| [PostfixExpressionPrim]
    | ( <LPAREN> TypeName <RPAREN> <LBRACE> InitializerList <COMMA> <RBRACE> [PostfixExpressionPrim] )
;

PostfixExpressionPrim :
     ( <LBRACKET> Expression <RBRACKET> [PostfixExpressionPrim] )
     | ( <LPAREN> [ArgumentExpressionList] <RPAREN> [PostfixExpressionPrim] )
     | ( <POINT> <IDENTIFIER> [PostfixExpressionPrim] )
     | ( <ARROW> <IDENTIFIER> [PostfixExpressionPrim] )
     | ( <INCR> [PostfixExpressionPrim] )
     | ( <MINUS> [PostfixExpressionPrim] )
;


//ArgumentExpressionList :
//    AssigmentExpression
//    | ( ArgumentExpressionList <COMMA> AssigmentExpression )
//;

ArgumentExpressionList :
    AssigmentExpression [ArgumentExpressionListPrim]
;

ArgumentExpressionListPrim :
    (<COMMA> AssigmentExpression  [ ArgumentExpressionListPrim])
;

UnaryExpression :
    PostfixExpression
    | ( <INCR> UnaryExpression )
    | ( <MINUS> UnaryExpression )
    | ( UnaryOperator CastExpression )
    | ( <SIZEOF> UnaryExpression )
    | ( <SIZEOF> <LPAREN> TypeName <RPAREN> )
    | ( <_ALIGNOF> <LPAREN> TypeName <RPAREN> )
;

UnaryOperator : <BIT_AND> | <STAR> | <PLUS> | <MINUS> | <TILDE> | <BANG> ;

CastExpression :
    UnaryExpression
    | ( <LPAREN> TypeName <RPAREN> CastExpression )
;

//MultiplicativeExpression :
//    CastExpression
//    | (MultiplicativeExpression <STAR> CastExpression)
//    | (MultiplicativeExpression <SLASH> CastExpression)
//    | (MultiplicativeExpression <REM> CastExpression)
//;

MultiplicativeExpression :
    CastExpression [MultiplicativeExpressionPrim]
;

MultiplicativeExpressionPrim :
    (<STAR> CastExpression [MultiplicativeExpressionPrim] )
    | (<SLASH> CastExpression [MultiplicativeExpressionPrim] )
    | (<REM> CastExpression [MultiplicativeExpressionPrim] )
;

//AdditiveExpression :
//    MultiplicativeExpression
//    | (AdditiveExpression <PLUS> MultiplicativeExpression)
//    | (AdditiveExpression <MINUS> MultiplicativeExpression)
//;

AdditiveExpression :
    MultiplicativeExpression [AdditiveExpressionPrim]
;

AdditiveExpressionPrim :
    (<PLUS> MultiplicativeExpression [AdditiveExpressionPrim] )
    | (<MINUS> MultiplicativeExpression [AdditiveExpressionPrim] )
;

//ShiftExpression :
//    AdditiveExpression
//    | (ShiftExpression <LSHIFT> AdditiveExpression)
//    | (ShiftExpression <RIGHT_SHIFT> AdditiveExpression)
//;

ShiftExpression :
    AdditiveExpression ((<LSHIFT> | <RIGHT_SHIFT>) AdditiveExpression)*
;

// RelationalExpression :
//     ShiftExpression
//     | ( RelationalExpression <LT> ShiftExpression )
//     | ( RelationalExpression <GT> ShiftExpression )
//     | ( RelationalExpression <LE> ShiftExpression )
//     | ( RelationalExpression <LE> ShiftExpression )
// ;

RelationalExpression :
    ShiftExpression (( <LT> | <GT> | <LE> | <GE> ) ShiftExpression)*
;

// EqualityExpression :
//     RelationalExpression
//     | (EqualityExpression <EQ> RelationalExpression)
//     | (EqualityExpression <NE> RelationalExpression)
// ;

EqualityExpression :
    RelationalExpression (( <EQ> | <NE> ) RelationalExpression)*
;

//AndExpression :
//    EqualityExpression
//    | (AndExpression <BIT_AND> EqualityExpression)
//;

AndExpression :
    EqualityExpression [AndExpressionPrim]
;

AndExpressionPrim :
    (<BIT_AND> EqualityExpression [AndExpressionPrim])
;

//ExclusiveOrExpression :
//    AndExpression
//    | (ExclusiveOrExpression <XOR> AndExpression)
//;

ExclusiveOrExpression :
    AndExpression [ExclusiveOrExpressionPrim]
;

ExclusiveOrExpressionPrim :
    (<XOR> AndExpression [ExclusiveOrExpressionPrim])
;

//InclusiveOrExpression :
//    ExclusiveOrExpression
//    | (InclusiveOrExpression <BIT_OR> ExclusiveOrExpression)
//;

InclusiveOrExpression :
    ExclusiveOrExpression [InclusiveOrExpressionPrim]
;

InclusiveOrExpressionPrim :
    (<BIT_OR> ExclusiveOrExpression [InclusiveOrExpressionPrim])
;

//LogicalAndExpression :
//    InclusiveOrExpression
//    | (LogicalAndExpression <SC_AND> InclusiveOrExpression)
//;

LogicalAndExpression :
    InclusiveOrExpression [LogicalAndExpressionPrim]
;

LogicalAndExpressionPrim :
    (<SC_AND> InclusiveOrExpression [LogicalAndExpressionPrim])
;

//LogicalOrExpression :
//    LogicalAndExpression
//    | (LogicalOrExpression <SC_OR> LogicalAndExpression)
//;

LogicalOrExpression :
    LogicalAndExpression [LogicalOrExpressionPrim]
;

LogicalOrExpressionPrim :
    (<SC_OR> LogicalAndExpression [LogicalOrExpressionPrim])
;

//ConditionalExpression :
//    LogicalOrExpression
//    | (LogicalOrExpression <HOOK> Expression <COLON> ConditionalExpression)
//;

ConditionalExpression :
    LogicalOrExpression [ConditionalExpressionPrim]
;

ConditionalExpressionPrim :
    (<HOOK> Expression <COLON> ConditionalExpression [LogicalOrExpressionPrim])
;

AssigmentExpression :
     UnaryExpression AssigmentOperator =>|| AssigmentExpression
    | ConditionalExpression
;

AssigmentOperator : <ASSIGN> | <STARASSIGN> | <SLASHASSIGN> | <REMASSIGN> | <PLUSASSIGN> | <MINUSASSIGN> | <LEFT_SHIFT_ASSIGN> | <RIGHT_SHIFT_ASSIGN> | <ANDASSIGN> | <XORASSIGN> | <ORASSIGN> ;

//Expression :
//    AssigmentExpression
//    | (Expression <COMMA> AssigmentExpression)
//;

Expression :
    AssigmentExpression [ExpressionPrim]
;

ExpressionPrim :
    (<COMMA> AssigmentExpression [ExpressionPrim])
;

ConstantExpression : ConditionalExpression;