Declaration :
    ( DeclarationSpecifiers [InitDeclaratorList] <SEMICOLON>)
    | StaticAssertDeclaration
;

DeclarationSpecifiers :
    (StorageClassSpecifier [DeclarationSpecifiers] )
    | (TypeSpecifier [DeclarationSpecifiers] )
    | (TypeQualifier [DeclarationSpecifiers] )
    | (FunctionSpecifier [DeclarationSpecifiers] )
    | (AlignmentSpecifier [DeclarationSpecifiers] )
;

//InitDeclaratorList :
//    InitDeclarator
//    | (InitDeclaratorList <COMMA> InitDeclarator)
//;

InitDeclaratorList :
    InitDeclarator (<COMMA> InitDeclarator)*
;

InitDeclarator :
    Declarator [<ASSIGN> Initializer]
;

StorageClassSpecifier : <TYPEDEF> | <EXTERN> | <STATIC> | <_THREAD_LOCAL> | <AUTO> | <REGISTER> ;

TypeSpecifier : <VOID> | <CHAR> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE> | <SIGNED> | <UNSIGNED>
    | <_BOOL> | <_COMPLEX> | AtomicTypeSpecifier | StructOrUnionSpecifier | EnumSpecifier
    | ClassSpecifier
;

ClassSpecifier : (<CLASS> <IDENTIFIER>) ;

StructOrUnionSpecifier :
    SCAN 3 (StructOrUnion [<IDENTIFIER>] <LBRACE> StructDeclarationList <RBRACE>)
    |(StructOrUnion <IDENTIFIER>)
;

StructOrUnion : <STRUCT> | <UNION> ;

StructDeclarationList :
    (SCAN StructDeclaration)+
;

StructDeclaration :
    (SpecifierQualifierList [StructDeclaratorList] <SEMICOLON>)
    | StaticAssertDeclaration
;

SpecifierQualifierList :
    (TypeSpecifier [SpecifierQualifierList])
    |(TypeQualifier [SpecifierQualifierList])
;

//StructDeclaratorList :
//    StructDeclarator
//    | (StructDeclaratorList <COMMA> StructDeclarator)
//;

StructDeclaratorList :
    StructDeclarator [StructDeclaratorListPrim]
;

StructDeclaratorListPrim :
    (<COMMA> StructDeclarator [StructDeclaratorListPrim])
;

StructDeclarator :
    Declarator
    | ([Declarator] ":" ConstantExpression)
;

EnumSpecifier :
    (<ENUM> [<IDENTIFIER>] <LBRACE> EnumeratorList <RBRACE>)
    |(<ENUM> [<IDENTIFIER>] <LBRACE> EnumeratorList <COMMA> <RBRACE>)
    |(<ENUM> <IDENTIFIER>)
;

//EnumeratorList :
//    Enumerator
//    | (EnumeratorList <COMMA> Enumerator)
//;

EnumeratorList :
    Enumerator [EnumeratorListPrim]
;

EnumeratorListPrim :
    (<COMMA> Enumerator [EnumeratorListPrim])
;

Enumerator :
    <ENUMERATION_CONSTANT>
    | (<ENUMERATION_CONSTANT> <ASSIGN> ConstantExpression)
;

AtomicTypeSpecifier : <_ATOMIC> <LPAREN> TypeName <RPAREN> ;

TypeQualifier : <CONST> | <RESTRICT> | <VOLATILE> | <_ATOMIC> ;

FunctionSpecifier : <INLINE> | <_NORETURN> ;

AlignmentSpecifier : (<_ALIGNAS> <LPAREN> TypeName <RPAREN> ) | (<_ALIGNAS> <LPAREN> ConstantExpression <RPAREN>) ;

Declarator : [Pointer] DirectDeclarator;

//DirectDeclarator :
//    <IDENTIFIER>
//    | <LPAREN> Declarator <RPAREN>
//    | (DirectDeclarator <LBRACKET> [TypeQualifierList] [AssigmentExpression] <RBRACKET>)
//    | (DirectDeclarator <LBRACKET> <STATIC> [TypeQualifierList] [AssigmentExpression] <RBRACKET>)
//    | (DirectDeclarator <LBRACKET> [TypeQualifierList] <STATIC> [AssigmentExpression] <RBRACKET>)
//    | (DirectDeclarator <LBRACKET> [TypeQualifierList] "*" <RBRACKET>)
//    | (DirectDeclarator <LPAREN> ParameterTypeList <RPAREN>)
//    | (DirectDeclarator <LPAREN> [IdentifierList] <RPAREN>)
//;

DirectDeclarator :
    (<IDENTIFIER> [DirectDeclaratorPrim])
    | (<LPAREN> Declarator <RPAREN> [DirectDeclaratorPrim])
;

DirectDeclaratorPrim :
    (<LBRACKET> [TypeQualifierList] [AssigmentExpression] <RBRACKET> [DirectDeclaratorPrim])
    | (<LBRACKET> <STATIC> [TypeQualifierList] [AssigmentExpression] <RBRACKET> [DirectDeclaratorPrim])
    | (<LBRACKET> [TypeQualifierList] <STATIC> [AssigmentExpression] <RBRACKET> [DirectDeclaratorPrim])
    | (<LBRACKET> [TypeQualifierList] "*" <RBRACKET> [DirectDeclaratorPrim])
    | (<LPAREN> ParameterTypeList <RPAREN> [DirectDeclaratorPrim])
    | (<LPAREN> [IdentifierList] <RPAREN> [DirectDeclaratorPrim])
;

Pointer :
    ("*" [TypeQualifierList] [Pointer])
;

//TypeQualifierList :
//    TypeQualifier
//    | (TypeQualifierList TypeQualifier)
//;

TypeQualifierList :
    (TypeQualifier)+
;

ParameterTypeList :
    ParameterList
    | (ParameterList <COMMA> "...")
;

//ParameterList :
//    ParameterDeclaration
//    | (ParameterList <COMMA> ParameterDeclaration)
//;

ParameterList :
    ParameterDeclaration (<COMMA> ParameterDeclaration)*
;

//ParameterDeclaration :
//    (DeclarationSpecifiers Declarator)
//    | (DeclarationSpecifiers [AbstractDeclarator])
//;

ParameterDeclaration :
    (DeclarationSpecifiers [Declarator|AbstractDeclarator] )
;

//IdentifierList:
//    <IDENTIFIER>
//    | (IdentifierList <COMMA> <IDENTIFIER>)
//;

IdentifierList:
    <IDENTIFIER> [IdentifierListPrim]
;

IdentifierListPrim :
    (<COMMA> <IDENTIFIER> [IdentifierListPrim])
;

TypeName : SpecifierQualifierList [AbstractDeclarator];

AbstractDeclarator :
    Pointer
    | ([Pointer] DirectAbstractDeclarator)
;

DirectAbstractDeclarator :
    <LPAREN> AbstractDeclarator <RPAREN> (DirectAbstractDeclarator)*
;

DirectAbstractDeclaratorPrim :
    (SCAN <LBRACKET> TypeQualifierList <STATIC> =>|| AssigmentExpression <RBRACKET>)
    | (SCAN 2 <LBRACKET> <STATIC> [TypeQualifierList] AssigmentExpression <RBRACKET>)
    | (SCAN <LBRACKET> [TypeQualifierList] [AssigmentExpression] <RBRACKET>)
    | (SCAN 2 <LBRACKET> "*" <RBRACKET>)
    | (<LPAREN> [ParameterTypeList] <RPAREN>)
;

TypedefName : <IDENTIFIER> ;

Initializer :
    AssigmentExpression
    | (<LBRACE> InitializerList <RBRACE>)
    | (<LBRACE> InitializerList <COMMA> <RBRACE>)
;

//InitializerList :
//    ([Designation] Initializer)
//    | (InitializerList <COMMA> [Designation] Initializer)
//;

InitializerList :
    ([Designation] Initializer) [InitializerListPrim]
;

InitializerListPrim :
    (<COMMA> [Designation] Initializer [InitializerListPrim])
;

Designation : DesignationList <ASSIGN>;

//DesignationList :
//    Designator
//    | (DesignationList Designator)
//;

DesignationList :
    Designator [DesignationListPrim]
;

DesignationListPrim :
    (Designator [DesignationListPrim])
;

Designator:
    (<LBRACKET> ConstantExpression <RBRACKET> )
    | <POINT> <IDENTIFIER>
;

StaticAssertDeclaration :
    (<_STATIC_ASSERT> <LPAREN> ConstantExpression [<COMMA> <STRING_LITERAL>] <RPAREN> <SEMICOLON>)
;